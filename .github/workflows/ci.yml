# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

# Workflow syntax reference:
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
name: Build / Deploy - CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  # This is used by the SharedProps to detect a PR build
  PR_NUMBER: ${{ github.event.pull_request.number }}
  # Set env to prod so we don't get an env suffix on the DNS names
  NODE_ENV: ${{ secrets.NODE_ENV }}
  DEMO_APP_NAME: demo-app
  NEXTJS_DEMO_APP_NAME: nextjs-demo
  RELEASE_APP_NAME: release
  AWS_REGION: us-east-2

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      prSuffix: ${{ steps.prSuffix.outputs.prSuffix }}
      prSuffixPackageVersion: ${{ steps.prSuffix.outputs.prSuffixPackageVersion }}
    steps:
      - uses: actions/checkout@v2

      - name: Compute PR Suffix
        id: prSuffix
        run: |
          if [ -n "${PR_NUMBER}" ]; then
            echo "::set-output name=prSuffix::-pr-${PR_NUMBER}"
            echo "::set-output name=prSuffixPackageVersion::-pr.${PR_NUMBER}"
            echo "PR_SUFFIX=-pr-"${PR_NUMBER} >> $GITHUB_ENV
          else
            echo "::set-output name=prSuffix::"
            echo "::set-output name=prSuffixPackageVersion::"
            echo "PR_SUFFIX=" >> $GITHUB_ENV
          fi

      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Node Modules
        run: npm ci

      - name: Build All TypeScript
        run: npm run build --if-present
    
      - name: Run Lint
        run: npm run lint

      - name: Run Node Tests
        run: npm run test

  deploy:
    strategy:
      matrix:
        deployName:
          - microapps-core
          - microapps-basic
          - microapps-basic-prefix
    name: deploy-${{ matrix.deployName }}
    concurrency:
      group: deploy-${{ matrix.deployName }}-${{ github.workflow }}-${{ github.event.pull_request.number }}
      cancel-in-progress: false
    needs:
      - build
    environment:
      name: ghpublic
      url: https://${{ steps.getCDKExports.outputs.edgeDomain }}${{ steps.getCDKExports.outputs.prefix }}/release/
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Extract Current NPM Version
        run: |
          echo 'PACKAGE_VERSION_ORIG='$(node -p -e "require('./package.json').version") >> $GITHUB_ENV

      - name: Compute NPM Version and App Lambda Name
        run: |
          echo 'PACKAGE_VERSION='${PACKAGE_VERSION_ORIG}${{ needs.build.outputs.prSuffixPackageVersion }} >> $GITHUB_ENV

      - name: Set Prefix Path
        run: |
          if [ "${{ matrix.deployName }}" == "microapps-basic-prefix" ]; then
            echo 'PREFIX=/prefix' >> $GITHUB_ENV
          else
            echo 'PREFIX=' >> $GITHUB_ENV
          fi

      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Node Modules
        run: npm ci

      - name: Extract App NPM Versions
        run: |
          echo 'RELEASE_APP_PACKAGE_VERSION='$(node -p -e "require('./node_modules/@pwrdrvr/microapps-app-release-cdk/package.json').version") >> $GITHUB_ENV
          echo 'NEXTJS_DEMO_APP_PACKAGE_VERSION='$(node -p -e "require('./node_modules/@pwrdrvr/microapps-app-nextjs-demo-cdk/package.json').version") >> $GITHUB_ENV

      - name: Build All TypeScript
        run: npm run build --if-present
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-session-name: microapps-ghpublic-build
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/builder-writeRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Stitch Prefix into Nextjs Demo App
        run: |
          if [ -n "${PREFIX}" ] ; then
            npx replace-in-file "/\/${NEXTJS_DEMO_APP_NAME}\/${NEXTJS_DEMO_APP_PACKAGE_VERSION}/g" ${PREFIX}/${NEXTJS_DEMO_APP_NAME}/${NEXTJS_DEMO_APP_PACKAGE_VERSION} --configFile=.nextjs-demo-replace.config.js --isRegex
          fi

      - name: Stitch Prefix into Release App
        run: |
          if [ -n "${PREFIX}" ] ; then
            npx replace-in-file "/\/${RELEASE_APP_NAME}\/${RELEASE_APP_PACKAGE_VERSION}/g" ${PREFIX}/${RELEASE_APP_NAME}/${RELEASE_APP_PACKAGE_VERSION} --configFile=.release-replace.config.js --isRegex
          fi

      - name: Set Hotswap Flag
        run: |
          if [ -n "${PR_NUMBER}" ]; then
            echo "HOTSWAP_FLAG=--hotswap" >> $GITHUB_ENV
          else
            echo "HOTSWAP_FLAG=" >> $GITHUB_ENV
          fi

      - name: Deploy CDK Stack
        run: npx cdk deploy --context @pwrdrvr/microapps:stackName=${{ matrix.deployName }}-ghpublic --context @pwrdrvr/microapps:deployDemoApp=true --context @pwrdrvr/microapps:deployNexjsDemoApp=true --context @pwrdrvr/microapps:deployReleaseApp=true ${HOTSWAP_FLAG} --require-approval never ${{ matrix.deployName }}

      - name: Get CDK Exports
        id: getCDKExports
        run: |
          echo "::set-output name=prefix::"${PREFIX}
          echo "::set-output name=edgeDomain::"$(aws cloudformation list-exports --query "Exports[?Name==\`${{ matrix.deployName }}-ghpublic-${NODE_ENV}${{ needs.build.outputs.prSuffix }}-edge-domain-name\`].Value" --no-paginate --output text)
          echo "EDGE_DOMAIN="$(aws cloudformation list-exports --query "Exports[?Name==\`${{ matrix.deployName }}-ghpublic-${NODE_ENV}${{ needs.build.outputs.prSuffix }}-edge-domain-name\`].Value" --no-paginate --output text) >> $GITHUB_ENV
          echo "DEPLOYER_LAMBDA_NAME="$(aws cloudformation list-exports --query "Exports[?Name==\`${{ matrix.deployName }}-ghpublic-${NODE_ENV}${{ needs.build.outputs.prSuffix }}-deployer-func-name\`].Value" --no-paginate --output text) >> $GITHUB_ENV
          echo "DEMO_APP_LAMBDA_NAME="$(aws cloudformation list-exports --query "Exports[?Name==\`${{ matrix.deployName }}-ghpublic-${NODE_ENV}${{ needs.build.outputs.prSuffix }}-demo-app-func-name\`].Value" --no-paginate --output text) >> $GITHUB_ENV
          echo "NEXTJS_DEMO_APP_LAMBDA_NAME="$(aws cloudformation list-exports --query "Exports[?Name==\`${{ matrix.deployName }}-ghpublic-${NODE_ENV}${{ needs.build.outputs.prSuffix }}-nextjs-demo-app-func-name\`].Value" --no-paginate --output text) >> $GITHUB_ENV
          echo "RELEASE_APP_LAMBDA_NAME="$(aws cloudformation list-exports --query "Exports[?Name==\`${{ matrix.deployName }}-ghpublic-${NODE_ENV}${{ needs.build.outputs.prSuffix }}-release-app-func-name\`].Value" --no-paginate --output text) >> $GITHUB_ENV

      - name: Publish Demo App to MicroApps
        run: |
          npx microapps-publish publish -a ${DEMO_APP_NAME} -n ${PACKAGE_VERSION} -d ${DEPLOYER_LAMBDA_NAME} -l ${DEMO_APP_LAMBDA_NAME} -s packages/demo-app/static_files -i index.html --overwrite --noCache

      - name: Test Demo App
        run: |
          echo Testing App Frame Loading
          curl --fail https://${EDGE_DOMAIN}${PREFIX}/${DEMO_APP_NAME}/
          echo Testing App HTML Loading
          curl --fail https://${EDGE_DOMAIN}${PREFIX}/${DEMO_APP_NAME}/${PACKAGE_VERSION}/index.html
          echo Testing App Method Invocation
          curl --fail https://${EDGE_DOMAIN}${PREFIX}/${DEMO_APP_NAME}/${PACKAGE_VERSION}/someMethod

      - name: Publish Nextjs Demo App to MicroApps
        run: |
          npx microapps-publish publish -a ${NEXTJS_DEMO_APP_NAME} -n ${NEXTJS_DEMO_APP_PACKAGE_VERSION} -d ${DEPLOYER_LAMBDA_NAME} -l ${NEXTJS_DEMO_APP_LAMBDA_NAME} -s node_modules/@pwrdrvr/microapps-app-nextjs-demo-cdk/lib/.static_files/nextjs-demo/${NEXTJS_DEMO_APP_PACKAGE_VERSION}/ --overwrite --noCache

      - name: Test Nextjs Demo App
        run: |
          echo Testing App Frame Loading
          curl --fail https://${EDGE_DOMAIN}${PREFIX}/${NEXTJS_DEMO_APP_NAME}/
          echo Testing App HTML Loading
          curl --fail https://${EDGE_DOMAIN}${PREFIX}/${NEXTJS_DEMO_APP_NAME}/${NEXTJS_DEMO_APP_PACKAGE_VERSION}
          echo Testing Post Page Loading
          curl --fail https://${EDGE_DOMAIN}${PREFIX}/${NEXTJS_DEMO_APP_NAME}/${NEXTJS_DEMO_APP_PACKAGE_VERSION}/posts/pre-rendering
          echo Testing Image Rendering
          curl --fail -o /dev/null https://${EDGE_DOMAIN}${PREFIX}/${NEXTJS_DEMO_APP_NAME}/${NEXTJS_DEMO_APP_PACKAGE_VERSION}/_next/image?url=%2Fimages%2Fprofile.jpg&w=384&q=75

      - name: Publish Release App to MicroApps
        run: |
          npx microapps-publish publish -a ${RELEASE_APP_NAME} -n ${RELEASE_APP_PACKAGE_VERSION} -d ${DEPLOYER_LAMBDA_NAME} -l ${RELEASE_APP_LAMBDA_NAME} -s node_modules/@pwrdrvr/microapps-app-release-cdk/lib/.static_files/release/${RELEASE_APP_PACKAGE_VERSION}/ --overwrite --noCache

      - name: Test Release App
        run: |
          echo Testing App Frame Loading
          curl --fail https://${EDGE_DOMAIN}${PREFIX}/${RELEASE_APP_NAME}/
          echo Testing App HTML Loading
          curl --fail https://${EDGE_DOMAIN}${PREFIX}/${RELEASE_APP_NAME}/${RELEASE_APP_PACKAGE_VERSION}
          echo Testing App Method Invocation
          curl --fail https://${EDGE_DOMAIN}${PREFIX}/${RELEASE_APP_NAME}/${RELEASE_APP_PACKAGE_VERSION}/api/refresh/${DEMO_APP_NAME}

  delete-apps:
    if: github.event_name == 'pull_request' && false
    concurrency:
      group: delete-apps-${{ github.workflow }}-${{ github.event.pull_request.number }}
      cancel-in-progress: false
    needs:
      - build
      - deploy
    environment:
      name: ghpublic
    permissions:
      contents: read
      id-token: write
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Extract Current NPM Version
        run: |
          echo 'PACKAGE_VERSION_ORIG='$(node -p -e "require('./package.json').version") >> $GITHUB_ENV

      - name: Compute NPM Version and App Lambda Name
        run: |
          echo 'APP_HOST_NAME=apps'${{ needs.build.outputs.prSuffix }} >> $GITHUB_ENV
          echo 'DEPLOYER_LAMBDA_NAME=microapps-ghpublic-deployer-prod'${{ needs.build.outputs.prSuffix }} >> $GITHUB_ENV
          echo 'PACKAGE_VERSION='${PACKAGE_VERSION_ORIG}${{ needs.build.outputs.prSuffixPackageVersion }} >> $GITHUB_ENV
          echo 'DEMO_APP_LAMBDA_NAME=microapps-ghpublic-app-'${DEMO_APP_NAME}-${NODE_ENV}${{ needs.build.outputs.prSuffix }} >> $GITHUB_ENV

      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Node Modules
        run: npm ci

      - name: Extract App NPM Versions
        run: |
          echo 'RELEASE_APP_PACKAGE_VERSION='$(node -p -e "require('./node_modules/@pwrdrvr/microapps-app-release-cdk/package.json').version") >> $GITHUB_ENV
          echo 'NEXTJS_DEMO_APP_PACKAGE_VERSION='$(node -p -e "require('./node_modules/@pwrdrvr/microapps-app-nextjs-demo-cdk/package.json').version") >> $GITHUB_ENV

      - name: Build All TypeScript
        run: npm run build --if-present
    
      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          role-session-name: microapps-ghpublic-build
          role-to-assume: arn:aws:iam::${{ secrets.AWS_ACCOUNT_ID }}:role/builder-writeRole
          aws-region: ${{ env.AWS_REGION }}

      - name: Delete Demo App from MicroApps
        run: |
          npx microapps-publish delete -a ${DEMO_APP_NAME} -n ${PACKAGE_VERSION} -d ${DEPLOYER_LAMBDA_NAME}

      - name: Delete Nextjs Demo App from MicroApps
        run: |
          npx microapps-publish delete -a ${NEXTJS_DEMO_APP_NAME} -n ${RELEASE_APP_PACKAGE_VERSION} -d ${DEPLOYER_LAMBDA_NAME}

      - name: Delete Release App from MicroApps
        run: |
          npx microapps-publish delete -a ${RELEASE_APP_NAME} -n ${RELEASE_APP_PACKAGE_VERSION} -d ${DEPLOYER_LAMBDA_NAME}
  
  build-jsii:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v2

      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install Node Modules
        run: npm ci

      - name: DEBUG - Print version of package
        run: cat node_modules/@aws-cdk/aws-apigatewayv2-integrations/package.json

      # - name: Generate Projen Files
      #   working-directory: packages/microapps-cdk/
      #   run: |
      #     npx projen --version
      #     npm run projen

      - name: Modify microapps-cdk tsconfig.json
        run: |
          mv packages/microapps-cdk/tsconfig.json packages/microapps-cdk/tsconfig.jsii.json
          jq ".compilerOptions += { \"skipLibCheck\": true }" packages/microapps-cdk/tsconfig.jsii.json > packages/microapps-cdk/tsconfig.json

      - name: DEBUG - Print version of package
        run: cat node_modules/@aws-cdk/aws-apigatewayv2-integrations/package.json

      - name: Build All TypeScript
        run: npm run build --if-present
    
      - name: Move root modules out of the way for CDK Construct build
        run: mv node_modules node_modules_hide
      
      - name: Build CDK Construct
        working-directory: packages/microapps-cdk/
        run: |
          npm ci
          npm run build

      - name: Confirm No Doc Changes
        working-directory: packages/microapps-cdk/
        run: |
          npm run post-compile
          git diff --ignore-space-at-eol --exit-code
