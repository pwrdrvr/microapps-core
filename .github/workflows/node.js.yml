# This workflow will do a clean install of node dependencies, build the source code and run tests across different versions of node
# For more information see: https://help.github.com/actions/language-and-framework-guides/using-nodejs-with-github-actions

# Workflow syntax reference:
# https://docs.github.com/en/actions/reference/workflow-syntax-for-github-actions
name: Node.js CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

env:
  PR_NUMBER: ${{ github.event.pull_request.number }}

jobs:
  build:
    defaults:
      run:
        shell: bash

    runs-on: ubuntu-latest

    strategy:
      matrix:
        node-version: [16.x]
        # See supported Node.js release schedule at https://nodejs.org/en/about/releases/

    steps:
    - uses: actions/checkout@v2
    - name: Use Node.js ${{ matrix.node-version }}
      uses: actions/setup-node@v2
      with:
        node-version: ${{ matrix.node-version }}

    - run: npm run preinstall

    - name: Cache Node.js modules
      uses: actions/cache@v2
      with:
        path: ~/.npm
        key: ${{ runner.OS }}-node-${{ hashFiles('**/package-lock.json') }}
        restore-keys: |
          ${{ runner.OS }}-node-
          ${{ runner.OS }}-
    
    - name: Install CDK
      run: npm i -g aws-cdk

    - name: Install Node Modules
      run: npm ci

    - name: Run Lint
      run: npm run lint

    - name: Build TypeScript
      run: npm run build --if-present

    # - name: Building Router with Rollup
    #   run: npm run build:router

    - name: Run Node Tests
      run: npm run test
  
    - name: Smoke Check CDK
      run: cdk list

    # - name: Login to ECR
    #   run: make aws-ecr-login
    #   env:
    #     AWS_REGION: ${{ secrets.AWS_REGION }}
    #     AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
    #     AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}

    # Pull the latest image to build, and avoid caching pull-only images.
    # (docker pull is faster than caching in most cases.)
    # https://github.com/marketplace/actions/docker-layer-caching
    # - name: Pull Docker Base Images
    #   run: docker-compose pull
    
    # In this step, this action saves a list of existing images,
    # the cache is created without them in the post run.
    # It also restores the cache if it exists.
    # https://github.com/marketplace/actions/docker-layer-caching
    # - name: Restore Docker Layer Cache
    #   uses: satackey/action-docker-layer-caching@v0.0.11
    #   # Ignore the failure of a step and avoid terminating the job.
    #   continue-on-error: true


    - name: Deploy CDK Stack
      run: make codebuild-deploy
      env:
          AWS_REGION: ${{ secrets.AWS_REGION }}
          AWS_ACCESS_KEY_ID: ${{ secrets.AWS_ACCESS_KEY_ID_DEV }}
          AWS_SECRET_ACCESS_KEY: ${{ secrets.AWS_SECRET_ACCESS_KEY_DEV }}
