# Based on projen template from packages/microapps-cdk/.github/workflows/release.yml
name: Release Packages
on:
  workflow_dispatch: {}
  release:
    types: [published]
jobs:
  #
  # CDK Construct
  #
  release:
    name: Build CDK Construct
    runs-on: ubuntu-latest
    permissions:
      contents: write
    outputs:
      latest_commit: ${{ steps.git_remote.outputs.latest_commit }}
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v3
        with:
          fetch-depth: 0
      - name: Set git identity
        run: |-
          git config user.name "github-actions"
          git config user.email "github-actions@github.com"
      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'
      - name: Install dependencies
        run: yarn install --frozen-lockfile
      - name: Build All TypeScript
        run: yarn build 
      - name: Run Node Tests
        env:
          NODE_ENV: test
        run: yarn test
      # This is required because of hoisting of the
      # `constructs` module, which causes `jsii` to fail to build
      - name: Install CDK Construct Deps
        working-directory: packages/microapps-cdk/
        run: yarn install --frozen-lockfile
      - name: Prepare the Release
        working-directory: packages/microapps-cdk/
        run: npx projen release
      - name: Apply Version to Everything (Deployer / Datalib)
        run: npm version v$(cat packages/microapps-cdk/dist/version.txt) --no-git-tag-version --workspaces
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::"$(git ls-remote origin -h ${{ github.ref }} | cut -f1)"
      - name: Upload version.txt
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: version-txt
          path: packages/microapps-cdk/dist/version.txt
      - name: Upload CDK Construct Artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v3
        with:
          name: build-artifact
          path: packages/microapps-cdk/dist
  release_github:
    name: Publish to GitHub Releases
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: write
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Collect GitHub Metadata
        run: mv .repo/dist dist
      - name: Release
        run: errout=$(mktemp); gh release create $(cat dist/releasetag.txt) -R $GITHUB_REPOSITORY -F dist/changelog.md -t $(cat dist/releasetag.txt) --target $GITHUB_REF 2> $errout && true; exitcode=$?; if [ $exitcode -ne 0 ] && ! grep -q "Release.tag_name already exists" $errout; then cat $errout; exit $exitcode; fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          GITHUB_REPOSITORY: ${{ github.repository }}
          GITHUB_REF: ${{ github.ref }}
  #
  # Publish Tool
  #
  release-publish-tool:
    needs: release
    name: Build Publish Tool
    runs-on: ubuntu-latest
    steps:
      - name: Checkout
        uses: actions/checkout@v3
      - name: Use Node.js 16
        uses: actions/setup-node@v3
        with:
          node-version: 16
          cache: 'yarn'
          cache-dependency-path: '**/yarn.lock'
      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::"$(git ls-remote origin -h ${{ github.ref }} | cut -f1)"
      - name: Download version.txt
        uses: actions/download-artifact@v3
        with:
          name: version-txt
          path: dist
      - name: Apply Version to Everything
        run: |
          cat dist/version.txt
          npm version v$(cat dist/version.txt) --no-git-tag-version --workspaces
      - name: Install Node Modules
        run: yarn install --frozen-lockfile
      - name: Build Publish TypeScript
        run: yarn build:publish 
      - name: Run Lint
        run: yarn lint
      - name: Upload Publish Tool artifact
        uses: actions/upload-artifact@v3
        with:
          name: publish-tool-dist
          path: |
            packages/microapps-publish/
            !packages/microapps-publish/node_modules/
      - name: Upload Datalib artifact
        uses: actions/upload-artifact@v3
        with:
          name: datalib-dist
          path: |
            packages/microapps-datalib/
            !packages/microapps-datalib/node_modules/
  release_npm:
    name: Publish to npm
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create js artifact
        run: cd .repo && npx projen package:js
      - name: Collect js Artifact
        run: mv .repo/dist dist
      - name: Release
        run: npx -p publib@latest publib-npm
        env:
          NPM_DIST_TAG: latest
          NPM_REGISTRY: registry.npmjs.org
          NPM_TOKEN: ${{ secrets.NPMJSORG_PUBLISH_TOKEN }} # publib requires NPM_TOKEN as an env var
  release_npm_publish_tool:
    name: Publish to npm - Publish Tool
    needs: [ release, release_npm, release-publish-tool ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Download Publish Tool build artifacts
        uses: actions/download-artifact@v3
        with:
          name: publish-tool-dist
          path: packages/microapps-publish
      - name: Download Datalib build artifacts
        uses: actions/download-artifact@v3
        with:
          name: datalib-dist
          path: packages/microapps-datalib
      #
      # Publish other non-JSII Artifacts to NPM
      #
      - name: NPM registry authentication
        run: npm set //registry.npmjs.org/:_authToken ${{ secrets.NPMJSORG_PUBLISH_TOKEN }}
      - name: Release Publish Tool - NPM
        working-directory: packages/microapps-publish/
        run: |
          npm publish
      - name: Release DataLib - NPM
        working-directory: packages/microapps-datalib/
        run: |
          npm publish
  release_maven:
    name: Publish to Maven Central
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-java@v2
        with:
          distribution: temurin
          java-version: 11.x
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create java artifact
        run: cd .repo && npx projen package:java
      - name: Collect java Artifact
        run: mv .repo/dist dist
      - name: Release
        run: npx -p publib@latest publib-maven
        env:
          MAVEN_GPG_PRIVATE_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          MAVEN_GPG_PRIVATE_KEY_PASSPHRASE: ${{ secrets.MAVEN_GPG_PRIVATE_KEY_PASSPHRASE }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_STAGING_PROFILE_ID: ${{ secrets.MAVEN_STAGING_PROFILE_ID }}
          MAVEN_ENDPOINT: https://s01.oss.sonatype.org
  release_pypi:
    name: Publish to PyPI
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - uses: actions/setup-python@v2
        with:
          python-version: 3.x
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create python artifact
        run: cd .repo && npx projen package:python
      - name: Collect python Artifact
        run: mv .repo/dist dist
      - name: Release
        run: npx -p publib@latest publib-pypi
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}
  release_nuget:
    name: Publish to NuGet Gallery
    needs: release
    runs-on: ubuntu-latest
    permissions:
      contents: read
    if: needs.release.outputs.latest_commit == github.sha
    steps:
      - uses: actions/setup-node@v3
        with:
          node-version: 14.x
      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: 3.x
      - name: Download build artifacts
        uses: actions/download-artifact@v3
        with:
          name: build-artifact
          path: dist
      - name: Prepare Repository
        run: mv dist .repo
      - name: Install Dependencies
        run: cd .repo && yarn install --check-files --frozen-lockfile
      - name: Create dotnet artifact
        run: cd .repo && npx projen package:dotnet
      - name: Collect dotnet Artifact
        run: mv .repo/dist dist
      - name: Release
        run: npx -p publib@latest publib-nuget
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_MICROAPPS }}
