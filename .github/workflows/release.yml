# Based on projen template from packages/microapps-cdk/.github/workflows/release.yml
# ~~ Generated by projen. To modify, edit .projenrc.js and run "npx projen".

name: Release Packages

on:
  # push:
  #   branches:
  #     - main
  # Building on pull request is only temporary
  # pull_request:
  #   branches: [ main ]

  workflow_dispatch: {}

jobs:
  #
  # CDK Construct
  #
  build-cdk-construct:
    name: Build CDK Construct
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: read
    env:
      CI: "true"
    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Set git identity
        run: |-
          git config user.name "Automation"
          git config user.email "github-actions@github.com"

      - name: Fix Permissions
        run: |
          chown -R root ./
          chmod -R 777 ./

      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Install dependencies
        run: npm ci

      - name: Post Install Patch of api-gatewayv2
        run: npm run postinstall

      # - name: Generate Projen Files
      #   working-directory: packages/microapps-cdk/
      #   run: |
      #     npm run projen

      - name: Build All TypeScript
        run: npm run build --if-present

      - name: Run Node Tests
        run: npm run test

      # - name: Move root NPM modules out of the way
      #   run: mv node_modules node_modules_hide

      - name: Install CDK Construct Deps
        working-directory: packages/microapps-cdk/
        run: |
          npm ci

      # - name: Post Install Patch of api-gatewayv2
      #   working-directory: packages/microapps-cdk/
      #   run: npx patch-package

      - name: Build CDK Construct
        working-directory: packages/microapps-cdk/
        run: |
          npx projen release

      - name: Apply Version to Everything (Deployer / Datalib)
        run: npm version v$(cat packages/microapps-cdk/dist/version.txt) --no-git-tag-version --workspaces

      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::"$(git ls-remote origin -h ${{
          github.ref }} | cut -f1)"

      - name: Upload version.txt
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2
        with:
          name: version-txt
          path: packages/microapps-cdk/dist/version.txt

      - if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        name: Create release
        working-directory: packages/microapps-cdk/
        run: |
          gh release create v$(cat dist/version.txt) -F dist/changelog.md -t v$(cat dist/version.txt)
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: Upload CDK Construct Artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2
        with:
          name: cdk-construct-dist
          path: packages/microapps-cdk/dist
    container:
      image: ghcr.io/pwrdrvr/jsii-node-16

  #
  # Publish Tool
  #
  build-publish-tool:
    name: Build Publish Tool
    needs: build-cdk-construct
    runs-on: ubuntu-latest

    steps:
      - name: Checkout
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16
          cache: 'npm'
          cache-dependency-path: '**/package-lock.json'

      - name: Check for new commits
        id: git_remote
        run: echo ::set-output name=latest_commit::"$(git ls-remote origin -h ${{
          github.ref }} | cut -f1)"

      - name: Download version.txt
        uses: actions/download-artifact@v2
        with:
          name: version-txt
          path: dist

      - name: Apply Version to Everything
        run: |
          cat dist/version.txt
          npm version v$(cat dist/version.txt) --no-git-tag-version --workspaces

      - name: Install Node Modules
        run: npm ci

      - name: Generate Projen Files
        working-directory: packages/microapps-cdk/
        run: |
          npm run projen

      - name: Build Publish TypeScript
        run: npm run build:publish --if-present

      - name: Run Lint
        run: npm run lint

      - name: Upload Publish Tool artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2
        with:
          name: publish-tool-dist
          path: |
            packages/microapps-publish/
            !packages/microapps-publish/node_modules/

      - name: Upload Datalib artifact
        if: ${{ steps.git_remote.outputs.latest_commit == github.sha }}
        uses: actions/upload-artifact@v2
        with:
          name: datalib-dist
          path: |
            packages/microapps-datalib/
            !packages/microapps-datalib/node_modules/

  #
  # Release Assets
  #
  release-assets:
    name: Release Assets
    needs: [ build-cdk-construct, build-publish-tool ]
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
    steps:
      - name: Use Node.js 16
        uses: actions/setup-node@v2
        with:
          node-version: 16

      - name: Download CDK Construct build artifacts
        uses: actions/download-artifact@v2
        with:
          name: cdk-construct-dist
          path: packages/microapps-cdk/dist

      - name: Download Publish Tool build artifacts
        uses: actions/download-artifact@v2
        with:
          name: publish-tool-dist
          path: packages/microapps-publish

      - name: Download Datalib build artifacts
        uses: actions/download-artifact@v2
        with:
          name: datalib-dist
          path: packages/microapps-datalib

      #
      # PyPI
      #
      # https://github.com/cdklabs/jsii-release#pypi
      - name: Release CDK Construct - PyPI
        working-directory: packages/microapps-cdk
        run: |
          npx -p jsii-release@latest jsii-release-pypi
        env:
          TWINE_USERNAME: ${{ secrets.TWINE_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.TWINE_PASSWORD }}

      # Docs for GitHub Nuget
      # https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-nuget-registry
      # Docs for jsii-release-nuget
      # https://github.com/cdklabs/jsii-release#nuget
      # - name: Release CDK Construct - GitHub NuGet
      #   run: cd packages/microapps-cdk && npx -p jsii-release@latest jsii-release-nuget
      #   env:
      #     NUGET_SERVER: https://nuget.pkg.github.com/pwrdrvr/index.json
      #     NUGET_API_KEY: ${{ secrets.GITHUB_TOKEN }}
      - name: Release CDK Construct - NuGet.org
        working-directory: packages/microapps-cdk/
        run: |
          npx -p jsii-release@latest jsii-release-nuget
        env:
          NUGET_API_KEY: ${{ secrets.NUGET_MICROAPPS }}

      # Docs for GitHub Maven
      # https://docs.github.com/en/packages/working-with-a-github-packages-registry/working-with-the-apache-maven-registry
      # Docs for jsii-release-maven
      # https://github.com/cdklabs/jsii-release#maven
      # - name: Release CDK Construct - GitHub Maven
      #   working-directory: packages/microapps-cdk/
      #   run: |
      #     npx -p jsii-release@latest jsii-release-maven
      #   env:
      #     MAVEN_SERVER_ID: github
      #     MAVEN_REPOSITORY_URL: https://maven.pkg.github.com/pwrdrvr/microapps-core
      #     MAVEN_USERNAME: ${{ github.actor }}
      #     MAVEN_PASSWORD: ${{ secrets.GITHUB_TOKEN }}
      - name: Release CDK Construct - Maven Central
        working-directory: packages/microapps-cdk/
        run: |
          npx -p jsii-release@latest jsii-release-maven
        env:
          MAVEN_ENDPOINT: https://s01.oss.sonatype.org
          MAVEN_STAGING_PROFILE_ID: 3127710ac57dbb
          MAVEN_USERNAME: ${{ secrets.MAVEN_USERNAME }}
          MAVEN_PASSWORD: ${{ secrets.MAVEN_PASSWORD }}
          MAVEN_GPG_PRIVATE_KEY: ${{ secrets.MAVEN_GPG_PRIVATE_KEY }}
          MAVEN_GPG_PRIVATE_KEY_PASSPHRASE: ${{ secrets.MAVEN_GPG_PRIVATE_KEY_PASSPHRASE }}

      # Docs for different release steps and params
      # https://www.npmjs.com/package/jsii-release
      # Docs for jsii-release-npm
      # https://github.com/cdklabs/jsii-release#npm
      # - name: Release CDK Construct - GitHub NPM
      #   run: cd packages/microapps-cdk && npx -p jsii-release@latest jsii-release-npm
      #   env:
      #     NPM_DIST_TAG: latest
      #     NPM_REGISTRY: npm.pkg.github.com
      #     NPM_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Release CDK Construct - npmjs.org
        working-directory: packages/microapps-cdk
        run: |
          npx -p jsii-release@latest jsii-release-npm
        env:
          NPM_TOKEN: ${{ secrets.NPMJSORG_PUBLISH_TOKEN }} # jsii-release requires NPM_TOKEN as an env var

      #
      # Publish other non-JSII Artifacts to GitHub Packages
      #
      # - name: Release Publish Tool - GitHub NPM
      #   run: npm config set registry https://npm.pkg.github.com && cd packages/microapps-publish/dist && npm publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      # - name: Release DataLib - GitHub NPM
      #   run: npm config set registry https://npm.pkg.github.com && cd packages/microapps-datalib/dist && npm publish
      #   env:
      #     NODE_AUTH_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      #
      # Publish other non-JSII Artifacts to NPM
      #
      - name: NPM registry authentication
        run: npm set //registry.npmjs.org/:_authToken ${{ secrets.NPMJSORG_PUBLISH_TOKEN }}

      - name: Release Publish Tool - NPM
        working-directory: packages/microapps-publish/
        run: |
          npm publish

      - name: Release DataLib - NPM
        working-directory: packages/microapps-datalib/
        run: |
          npm publish

      # - name: Github package registry authentication
      #   run: npm set //npm.pkg.github.com/:_authToken ${{ secrets.GPR_TOKEN }}
      # - name: Npm registry authentication
      #   run: npm set //registry.npmjs.org/:_authToken ${{ secrets.NPM_TOKEN }}
      # - name: Publish package to Github and Npm package registries
      #   run: npm publish

    container:
      image: ghcr.io/pwrdrvr/jsii-node-16
